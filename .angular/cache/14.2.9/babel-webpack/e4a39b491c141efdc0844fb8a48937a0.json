{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { NativeStorage } from '@awesome-cordova-plugins/native-storage/ngx';\nimport { HTTP } from '@awesome-cordova-plugins/http/ngx';\nimport { RegisterDeviceService } from './registerdevice.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./registerdevice.service\";\nimport * as i2 from \"@awesome-cordova-plugins/http/ngx\";\nimport * as i3 from \"@awesome-cordova-plugins/native-storage/ngx\";\nexport let SsmQueryService = /*#__PURE__*/(() => {\n  class SsmQueryService {\n    constructor(regDevServ, http, storage) {\n      this.regDevServ = regDevServ;\n      this.http = http;\n      this.storage = storage;\n    }\n\n    eSearchQuery(urlEndpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.get(urlEndpoint, {}, headers);\n        });\n      });\n    }\n\n    saveQueryResult(result) {\n      return this.storage.setItem('queryResult', result);\n    }\n\n    eQueryQuery(urlEndpoint, postBody) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.post(urlEndpoint, postBody, headers);\n        });\n      });\n    }\n\n    eCompoundQuery(urlEndpoint, postBody) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.post(urlEndpoint, postBody, headers);\n        });\n      });\n    }\n\n    status308Query(urlEndpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.get(urlEndpoint, {}, {});\n        });\n      });\n    }\n\n    bizTrustQuery(urlEndpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.post(urlEndpoint, {}, headers);\n        });\n      });\n    }\n\n    contactUsQuery(urlEndpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var authHeader;\n        return this.regDevServ.getDevToken().then(token => {\n          authHeader = 'Bearer' + ' ' + token;\n          let headers = {\n            Authorization: authHeader\n          };\n          return this.http.get(urlEndpoint, {}, {});\n        });\n      });\n    }\n\n  }\n\n  SsmQueryService.ɵfac = function SsmQueryService_Factory(t) {\n    return new (t || SsmQueryService)(i0.ɵɵinject(i1.RegisterDeviceService), i0.ɵɵinject(i2.HTTP), i0.ɵɵinject(i3.NativeStorage));\n  };\n\n  SsmQueryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SsmQueryService,\n    factory: SsmQueryService.ɵfac,\n    providedIn: 'root'\n  });\n  return SsmQueryService;\n})();","map":null,"metadata":{},"sourceType":"module"}