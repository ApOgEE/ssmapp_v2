{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Platform, ToastController } from '@ionic/angular';\nimport { BehaviorSubject } from 'rxjs';\nimport { Network } from '@ionic-native/network/ngx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/network/ngx\";\nimport * as i2 from \"@ionic/angular\";\nexport var ConnectionStatus = /*#__PURE__*/(() => {\n  (function (ConnectionStatus) {\n    ConnectionStatus[ConnectionStatus[\"Online\"] = 0] = \"Online\";\n    ConnectionStatus[ConnectionStatus[\"Offline\"] = 1] = \"Offline\";\n  })(ConnectionStatus || (ConnectionStatus = {}));\n\n  return ConnectionStatus;\n})();\nexport let NetworkService = /*#__PURE__*/(() => {\n  class NetworkService {\n    constructor(network, toastController, plt) {\n      this.network = network;\n      this.toastController = toastController;\n      this.plt = plt;\n      this.status = new BehaviorSubject(ConnectionStatus.Offline);\n      this.plt.ready().then(() => {\n        this.initializeNetworkEvents();\n        let status = this.network.type !== 'none' ? ConnectionStatus.Online : ConnectionStatus.Offline;\n        this.status.next(status);\n      });\n    }\n\n    initializeNetworkEvents() {\n      this.network.onDisconnect().subscribe(() => {\n        if (this.status.getValue() === ConnectionStatus.Online) {\n          console.log('WE ARE OFFLINE');\n          this.updateNetworkStatus(ConnectionStatus.Offline);\n        }\n      });\n      this.network.onConnect().subscribe(() => {\n        if (this.status.getValue() === ConnectionStatus.Offline) {\n          console.log('WE ARE ONLINE');\n          this.updateNetworkStatus(ConnectionStatus.Online);\n        }\n      });\n    }\n\n    updateNetworkStatus(status) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.status.next(status);\n        let connection = status == ConnectionStatus.Offline ? 'Offline' : 'Online';\n        let toast = this.toastController.create({\n          message: `You are now ${connection}`,\n          duration: 3000,\n          position: 'bottom'\n        });\n        toast.then(toast => toast.present());\n      });\n    }\n\n    onNetworkChange() {\n      return this.status.asObservable();\n    }\n\n    getCurrentNetworkStatus() {\n      return this.status.getValue();\n    }\n\n  }\n\n  NetworkService.ɵfac = function NetworkService_Factory(t) {\n    return new (t || NetworkService)(i0.ɵɵinject(i1.Network), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i2.Platform));\n  };\n\n  NetworkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkService,\n    factory: NetworkService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetworkService;\n})();","map":null,"metadata":{},"sourceType":"module"}