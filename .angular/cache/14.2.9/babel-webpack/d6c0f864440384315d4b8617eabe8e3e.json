{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar HTTP =\n/** @class */\nfunction (_super) {\n  __extends(HTTP, _super);\n\n  function HTTP() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  HTTP.prototype.getBasicAuthHeader = function (username, password) {\n    return cordova(this, \"getBasicAuthHeader\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.useBasicAuth = function (username, password) {\n    return cordova(this, \"useBasicAuth\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.getHeaders = function (host) {\n    return cordova(this, \"getHeaders\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setHeader = function (host, header, value) {\n    return cordova(this, \"setHeader\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.getDataSerializer = function () {\n    return cordova(this, \"getDataSerializer\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setDataSerializer = function (serializer) {\n    return cordova(this, \"setDataSerializer\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setCookie = function (url, cookie) {\n    return cordova(this, \"setCookie\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.clearCookies = function () {\n    return cordova(this, \"clearCookies\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.removeCookies = function (url, cb) {\n    return cordova(this, \"removeCookies\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.getCookieString = function (url) {\n    return cordova(this, \"getCookieString\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.getRequestTimeout = function () {\n    return cordova(this, \"getRequestTimeout\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setRequestTimeout = function (timeout) {\n    return cordova(this, \"setRequestTimeout\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.getFollowRedirect = function () {\n    return cordova(this, \"getFollowRedirect\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setFollowRedirect = function (follow) {\n    return cordova(this, \"setFollowRedirect\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.setServerTrustMode = function (mode) {\n    return cordova(this, \"setServerTrustMode\", {}, arguments);\n  };\n\n  HTTP.prototype.setClientAuthMode = function (mode, options) {\n    return cordova(this, \"setClientAuthMode\", {}, arguments);\n  };\n\n  HTTP.prototype.post = function (url, body, headers) {\n    return cordova(this, \"post\", {}, arguments);\n  };\n\n  HTTP.prototype.postSync = function (url, body, headers, success, failure) {\n    return cordova(this, \"post\", {\n      \"methodName\": \"post\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.get = function (url, parameters, headers) {\n    return cordova(this, \"get\", {}, arguments);\n  };\n\n  HTTP.prototype.getSync = function (url, parameters, headers, success, failure) {\n    return cordova(this, \"get\", {\n      \"methodName\": \"get\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.put = function (url, body, headers) {\n    return cordova(this, \"put\", {}, arguments);\n  };\n\n  HTTP.prototype.putSync = function (url, body, headers, success, failure) {\n    return cordova(this, \"put\", {\n      \"methodName\": \"put\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.patch = function (url, body, headers) {\n    return cordova(this, \"patch\", {}, arguments);\n  };\n\n  HTTP.prototype.patchSync = function (url, body, headers, success, failure) {\n    return cordova(this, \"patch\", {\n      \"methodName\": \"patch\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.delete = function (url, parameters, headers) {\n    return cordova(this, \"delete\", {}, arguments);\n  };\n\n  HTTP.prototype.deleteSync = function (url, parameters, headers, success, failure) {\n    return cordova(this, \"delete\", {\n      \"methodName\": \"delete\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.head = function (url, parameters, headers) {\n    return cordova(this, \"head\", {}, arguments);\n  };\n\n  HTTP.prototype.headSync = function (url, parameters, headers, success, failure) {\n    return cordova(this, \"head\", {\n      \"methodName\": \"head\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.options = function (url, parameters, headers) {\n    return cordova(this, \"options\", {}, arguments);\n  };\n\n  HTTP.prototype.optionsSync = function (url, parameters, headers, success, failure) {\n    return cordova(this, \"options\", {\n      \"methodName\": \"options\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.uploadFile = function (url, body, headers, filePath, name) {\n    return cordova(this, \"uploadFile\", {}, arguments);\n  };\n\n  HTTP.prototype.uploadFileSync = function (url, body, headers, filePath, name, success, failure) {\n    return cordova(this, \"uploadFile\", {\n      \"methodName\": \"uploadFile\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.downloadFile = function (url, body, headers, filePath) {\n    return cordova(this, \"downloadFile\", {}, arguments);\n  };\n\n  HTTP.prototype.downloadFileSync = function (url, body, headers, filePath, success, failure) {\n    return cordova(this, \"downloadFile\", {\n      \"methodName\": \"downloadFile\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.sendRequest = function (url, options) {\n    return cordova(this, \"sendRequest\", {}, arguments);\n  };\n\n  HTTP.prototype.sendRequestSync = function (url, options, success, failure) {\n    return cordova(this, \"sendRequest\", {\n      \"methodName\": \"sendRequest\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  HTTP.prototype.abort = function (requestId) {\n    return cordova(this, \"abort\", {}, arguments);\n  };\n\n  Object.defineProperty(HTTP.prototype, \"ErrorCode\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"ErrorCode\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"ErrorCode\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  HTTP.pluginName = \"HTTP\";\n  HTTP.plugin = \"cordova-plugin-advanced-http\";\n  HTTP.pluginRef = \"cordova.plugin.http\";\n  HTTP.repo = \"https://github.com/silkimen/cordova-plugin-advanced-http\";\n  HTTP.platforms = [\"Android\", \"iOS\"];\n\n  HTTP.ɵfac = /*@__PURE__*/function () {\n    var ɵHTTP_BaseFactory;\n    return function HTTP_Factory(t) {\n      return (ɵHTTP_BaseFactory || (ɵHTTP_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(HTTP)))(t || HTTP);\n    };\n  }();\n\n  HTTP.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HTTP,\n    factory: function (t) {\n      return HTTP.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return HTTP;\n}(AwesomeCordovaNativePlugin);\n\nexport { HTTP }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}