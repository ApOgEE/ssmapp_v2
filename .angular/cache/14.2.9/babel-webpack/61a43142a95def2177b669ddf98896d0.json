{"ast":null,"code":"import { BarcodeScanner } from '@ionic-native/barcode-scanner/ngx';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ConnectionStatus, NetworkService } from './network.service';\nimport { SsmQueryService } from './ssmquery.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"./network.service\";\nimport * as i3 from \"./ssmquery.service\";\nimport * as i4 from \"@ionic-native/barcode-scanner/ngx\";\nconst apiv2url = 'https://m.ssm.com.my/apiv2/index.php/';\nexport let QRScannerService = /*#__PURE__*/(() => {\n  class QRScannerService {\n    constructor(translate, netServ, ssmQueryServ, barcodeScanner) {\n      this.translate = translate;\n      this.netServ = netServ;\n      this.ssmQueryServ = ssmQueryServ;\n      this.barcodeScanner = barcodeScanner;\n    }\n\n    scanQRCode() {\n      var scannerOptions = {\n        // preferFrontCamera : true, // iOS and Android\n        // showFlipCameraButton : true, // iOS and Android\n        showTorchButton: true,\n        // torchOn: true, // Android, launch with the torch switched on (if available)\n        // saveHistory: true, // Android, save scan history (default false)\n        prompt: this.translate.instant('QRSCANPROMPT'),\n        resultDisplayDuration: 500 // Android, display scanned text for X ms. 0 suppresses it entirely, default 1500\n        //formats : \"QR_CODE,PDF_417\", // default: all but PDF_417 and RSS_EXPANDED\n        // orientation : \"landscape\", // Android only (portrait|landscape), default unset so it rotates with the device\n        // disableAnimations : true, // iOS\n        // disableSuccessBeep: false // iOS and Android\n\n      };\n      return this.barcodeScanner.scan(scannerOptions).then(barcodeData => {\n        if (this.netServ.getCurrentNetworkStatus() === ConnectionStatus.Offline) {\n          return \"NetworkError\";\n        }\n\n        return barcodeData.text;\n      }).catch(err => {\n        return err;\n      });\n    }\n\n    bizTrustQuery(barcodetext) {\n      let urlEndpoint = apiv2url + 'qr/resolve' + \"?qrcode=\" + barcodetext;\n      return this.ssmQueryServ.bizTrustQuery(urlEndpoint).then(response => {\n        console.log(JSON.stringify(response.status));\n        if (response.status == 401 || response.status == 404) return \"Unauthorised\";\n        this.bizTrustQueryRespondData = JSON.parse(response.data);\n        console.log(JSON.stringify(this.bizTrustQueryRespondData));\n\n        if (this.bizTrustQueryRespondData.success == false) {\n          console.log(\"Error - \" + this.bizTrustQueryRespondData);\n          return \"Fail\";\n        }\n\n        if (this.bizTrustQueryRespondData.response.successCode !== \"00\") {\n          return \"Error\";\n        }\n\n        return this.bizTrustQueryRespondData.response;\n      }, error => {\n        return error;\n      });\n    }\n\n    saveResult(data) {\n      return this.ssmQueryServ.saveQueryResult(JSON.stringify(data)).then(() => {\n        console.log(\"query result saved!\");\n        return \"Success\";\n      });\n    }\n\n  }\n\n  QRScannerService.ɵfac = function QRScannerService_Factory(t) {\n    return new (t || QRScannerService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.NetworkService), i0.ɵɵinject(i3.SsmQueryService), i0.ɵɵinject(i4.BarcodeScanner));\n  };\n\n  QRScannerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QRScannerService,\n    factory: QRScannerService.ɵfac,\n    providedIn: 'root'\n  });\n  return QRScannerService;\n})();","map":null,"metadata":{},"sourceType":"module"}