{"ast":null,"code":"import { Device } from '@awesome-cordova-plugins/device/ngx';\nimport { NativeStorage } from '@awesome-cordova-plugins/native-storage/ngx';\nimport { HTTP } from '@awesome-cordova-plugins/http/ngx';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@awesome-cordova-plugins/http/ngx\";\nimport * as i2 from \"@awesome-cordova-plugins/device/ngx\";\nimport * as i3 from \"@awesome-cordova-plugins/native-storage/ngx\";\nexport let RegisterDeviceService = /*#__PURE__*/(() => {\n  class RegisterDeviceService {\n    constructor(http, device, storage) {\n      this.http = http;\n      this.device = device;\n      this.storage = storage;\n      this.apiv2url = 'https://m.ssm.com.my/apiv2/index.php/';\n      this.secKey = 'ZMVbSD0CZwdRDxTd3DzvfDT8xy60ZgwX';\n      this.apiurl = 'https://m.ssm.com.my/api/';\n      this.regDevResultData = {\n        success: false,\n        token: \"\"\n      };\n    }\n\n    registerDevice() {\n      var timeNow = Math.floor(new Date().getTime() / 100000);\n      var uuid = this.device.uuid;\n      var platform = this.device.platform;\n      var calculatedHash = Md5.hashStr(uuid + platform + timeNow + this.secKey);\n      let headers = {\n        'Content-Type': 'application/json; charset=utf-8'\n      }; // version 2\n\n      let postData = {\n        \"uuid\": uuid,\n        \"os\": platform,\n        \"hash\": calculatedHash\n      };\n      let urlEndpoint = this.apiv2url + 'device/register';\n      return this.http.post(urlEndpoint, postData, headers).then(response => {\n        this.regDevResultData = JSON.parse(response.data);\n        return this.storage.setItem('token', this.regDevResultData.token);\n      }, error => {\n        console.log(error);\n      });\n    } // registerDeviceV1() {\n    //   var uuid = 'fd7cfed5-fa60-4942-8a47-79307233781c'\n    //   var platform = 'Chrome'\n    //   let headers = new HttpHeaders()\n    //   headers.append('Content-Type', 'application/json; charset=utf-8');\n    //   var httpOptions = { headers }\n    //   // version 1\n    //   let postData = { \"uuid\" : uuid, \"type\" : platform }\n    //   let urlEndpoint = this.apiurl + 'register-device'\n    //   this.http.post<any>(urlEndpoint, postData, httpOptions)\n    //     .subscribe(resData => {\n    //       console.log(JSON.stringify(resData));\n    //      }, error => {\n    //       console.log(error);\n    //     });\n    // }\n\n\n    getDevToken() {\n      return this.storage.getItem('token').then(data => {\n        return data;\n      });\n    }\n\n  }\n\n  RegisterDeviceService.ɵfac = function RegisterDeviceService_Factory(t) {\n    return new (t || RegisterDeviceService)(i0.ɵɵinject(i1.HTTP), i0.ɵɵinject(i2.Device), i0.ɵɵinject(i3.NativeStorage));\n  };\n\n  RegisterDeviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegisterDeviceService,\n    factory: RegisterDeviceService.ɵfac,\n    providedIn: 'root'\n  });\n  return RegisterDeviceService;\n})();","map":null,"metadata":{},"sourceType":"module"}