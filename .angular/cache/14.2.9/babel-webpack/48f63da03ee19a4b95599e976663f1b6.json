{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { LoadingController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@ngx-translate/core\";\nexport let SsmloadingService = /*#__PURE__*/(() => {\n  class SsmloadingService {\n    constructor(loadingController, translate) {\n      this.loadingController = loadingController;\n      this.translate = translate;\n    }\n\n    showHideAutoLoader() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loading = yield this.loadingController.create({\n          message: 'This Loader Will Auto Hide in 2 Seconds',\n          duration: 2000\n        });\n        yield loading.present();\n        const {\n          role,\n          data\n        } = yield loading.onDidDismiss();\n        console.log('Loading dismissed! after 2 Seconds', {\n          role,\n          data\n        });\n      });\n    } // Show the loader for infinite time\n\n\n    showLoader() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let searchingText = this.translate.instant('SEARCHING');\n        const res = yield this.loadingController.create({\n          spinner: 'circles',\n          message: searchingText\n        });\n        res.present();\n      });\n    }\n\n    showLoaderText(infotext) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let searchingText = this.translate.instant(infotext);\n        const res = yield this.loadingController.create({\n          spinner: 'circles',\n          message: searchingText\n        });\n        res.present();\n      });\n    } // Hide the loader if already created otherwise return error\n\n\n    hideLoader() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const res = yield this.loadingController.dismiss();\n          console.log('Loading dismissed!', res);\n        } catch (error) {\n          console.log('error', error);\n        }\n      });\n    }\n\n  }\n\n  SsmloadingService.ɵfac = function SsmloadingService_Factory(t) {\n    return new (t || SsmloadingService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i2.TranslateService));\n  };\n\n  SsmloadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SsmloadingService,\n    factory: SsmloadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return SsmloadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}